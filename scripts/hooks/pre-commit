#!/bin/sh
# Pre-commit hook
if [ -n "$SKIP_METADATA_HOOK" ]; then
    exit 0
fi

current_user=$(git config user.name)
current_timestamp=$(date +"%Y-%m-%d %H:%M:%S")

get_comment_style() {
    case "$1" in
        *.py)
            echo "single"
            ;;
        *.sql|*.sqlx)
            echo "block"
            ;;
        *)
            echo "single"
            ;;
    esac
}

get_next_version() {
    file=$1
    if [[ "$file" =~ \.(sql|sqlx)$ ]]; then
        # For SQL files, look for version in block comment
        last_version=$(awk '
            /\/\*/, /\*\// {
                if ($0 ~ /[0-9]+\.[0-9]+/) {
                    match($0, /[0-9]+\.[0-9]+/);
                    if (RLENGTH > 0) {
                        print substr($0, RSTART, RLENGTH);
                        exit
                    }
                }
            }
        ' "$file")
    else
        # Original logic for other files
        last_version=$(awk '
            /^# -{80}$/ { start=1; next }
            start && /^# [A-Za-z0-9]+/ { print $3; exit }
        ' "$file")
    fi
    
    if [ -z "$last_version" ] || ! [[ "$last_version" =~ ^[0-9]+\.[0-9]+$ ]]; then
        echo "1.0"
        return
    fi
    
    major_version=$(echo "$last_version" | cut -d. -f1)
    minor_version=$(echo "$last_version" | cut -d. -f2)
    
    new_minor_version=$((minor_version + 1))
    if [ "$new_minor_version" -eq "10" ]; then
        new_major_version=$((major_version + 1))
        new_minor_version="0"
    else
        new_major_version="$major_version"
    fi
    
    echo "$new_major_version.$new_minor_version"
}

update_metadata() {
    file=$1
    comment_style=$(get_comment_style "$file")
    temp_message="PENDING_COMMIT_MESSAGE"
    
    if [ "$comment_style" = "block" ]; then
        # Handle SQL files with block comments
        if grep -q "creator name:" "$file"; then
            if grep -q "PENDING_COMMIT_MESSAGE" "$file"; then
                return 
            fi
            
            {
                echo "/*"
                # Extract existing header content (without /* and */)
                awk '
                    /\/\*/{p=1;next} /\*\//{p=0} p
                ' "$file" | head -4
                
                # Add new entry
                printf "%-20s %-15s %-23s %s\n" "$current_user" "$(get_next_version "$file")" "$current_timestamp" "$temp_message"
                
                # Add previous entries (up to 9)
                awk '
                    /\/\*/{p=1;next} /\*\//{p=0} p
                ' "$file" | awk 'NR>4' | head -9
                
                echo "*/"
                echo ""
                
                # Add rest of the file content
                awk '
                    /\*\//{p=1;next} p
                ' "$file"
            } > "$file.tmp"
        else
            # Create new header for SQL files
            {
                echo "/*"
                echo "creator name: $current_user"
                echo "creation time: $current_timestamp"
                echo "Modified by         Version          Modified timestamp      Commit message"
                echo "--------------------------------------------------------------------------------"
                printf "%-20s %-15s %-23s %s\n" "$current_user" "1.0" "$current_timestamp" "$temp_message"
                echo "*/"
                echo ""
                cat "$file"
            } > "$file.tmp"
        fi
    else
        # Original logic for non-SQL files
        if grep -q "^# creator name:" "$file"; then
            if grep -q "PENDING_COMMIT_MESSAGE" "$file"; then
                return 
            fi
            
            {
                awk '
                    /^# creator name:/,/^# -{80}$/ {print}
                ' "$file"
                
                printf "# %-20s %-15s %-23s %s\n" "$current_user" "$(get_next_version "$file")" "$current_timestamp" "$temp_message"
                
                awk '
                    BEGIN {count = 0}
                    /^# -{80}$/ {header_end = 1; next}
                    header_end && /^#/ && count < 9 {print; count++}
                ' "$file"
                
                echo ""
                awk '
                    BEGIN {content = 0}
                    /^[^#]/ || $0 == "" {content = 1}
                    content {print}
                ' "$file"
            } > "$file.tmp"
        else
            {
                echo "# creator name: $current_user"
                echo "# creation time: $current_timestamp"
                echo "# Modified by         Version          Modified timestamp      Commit message"
                echo "# --------------------------------------------------------------------------------"
                printf "# %-20s %-15s %-23s %s\n" "$current_user" "1.0" "$current_timestamp" "$temp_message"
                echo ""
                cat "$file"
            } > "$file.tmp"
        fi
    fi
    
    mv "$file.tmp" "$file"
    export SKIP_METADATA_HOOK=1
    git add "$file"
    unset SKIP_METADATA_HOOK
}

for file in $(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(sqlx|sql|py)$'); do
    echo "$file" >> .git/TRACKED_FILES
    update_metadata "$file"
done

exit 0